# need these packages
library(survival)
library(survminer)
library(flexsurv)
library(dplyr)
library(visreg)


#import data
katrina<-read.csv('C:\\Users\\escha\\OneDrive\\Documents\\MSA\\Fall Classes\\Survival Analysis\\Data\\katrina.csv', header = TRUE)

View(katrina)

#checking distributions
#--weibull
fit_wb <- flexsurvreg(Surv(hour, reason ==1 ) ~ backup+bridgecrane+servo+trashrack+elevation+slope+age, 
                      data = katrina, dist = "weibull")

#---------based on the distribution selection, weibull is the best for this case

# Fitting the AFT model with all variables
fitAFT <- survreg(Surv(time = hour, event = reason %in% c(2,3)) ~ backup+ bridgecrane + servo + trashrack + elevation + slope + age, 
               data = katrina, dist = "weibull") 
summary(fitAFT)

# Fitting the Cox model with all variables
fitCOX <- coxph(Surv(time = hour, event = reason %in% c(2,3)) ~ backup+ bridgecrane + servo + trashrack + elevation + slope + age,
              data = katrina)
summary(fitCOX)

############ Model Selection ###############

# Comparing models using AIC & LRT

AIC(fitCOX)
AIC(fitAFT)

lrtAFT <- 2*diff(fitAFT$loglik)
lrtCOX <- 2*diff(fitCOX$loglik)

# Shrinkage factor and comparing predicted risks AFT model
df_model <- length(fitAFT$coefficients) # number of coefficients in model
LR_model <- 2*diff(fitAFT$loglik) # LRT statistic from model
(v_full <- 1 - (df_model/LR_model)) # estimate shrinkage factor
eta_shrunkAFT <- v_full*predict(fitAFT, newdata = katrina, type = "lp")

# Looking for spread in peaks
hist(eta_shrunkAFT)

# Shrinkage factor and comparing predicted risks Cox model
df_model <- length(fitCOX$coefficients) # number of coefficients in model
LR_model <- 2*diff(fitCOX$loglik) # LRT statistic from model
(v_full <- 1 - (df_model/LR_model)) # estimate shrinkage factor
eta_shrunkCOX <- v_full*predict(fitCOX, newdata = katrina, type = "lp")

# Looking for spread in peaks
hist(eta_shrunkCOX)

# Comparing event, time, residuals
resids <- data.frame(event = fitCOX$y[,dim(fitCOX$y)[2]],
                     time = fitCOX$y[,dim(fitCOX$y)[2] - 1],
                     res_m = residuals(fitCOX, type = "martingale"),
                     res_d = residuals(fitCOX, type = "deviance"),
                     ID = 1:length(residuals(fitCOX)))
# martingale vs. time
ggplot(resids, aes(x = time, y = res_m, color = factor(event))) +
  geom_point() +
  labs(x = "week", y = "martingale residuals", color = "event") +
  scale_color_manual(values = c("purple", "orange"))
# deviance vs. time
ggplot(resids, aes(x = time, y = res_d, color = factor(event))) +
  geom_point() +
  labs(x = "week", y = "deviance residuals", color = "event") +
  scale_color_manual(values = c("purple", "orange"))

############## Time Independence Assumptions ##############

# Checking independence from time
# Backup
fit_strat <- coxph(Surv(time = hour, event = reason %in% c(2,3)) ~ strata(backup)+ bridgecrane + servo + trashrack + elevation + slope + age,
                   data = katrina)
ggsurvplot(survfit(fit_strat), data = katrina, fun = "cloglog")

# Bridgecrane
fit_strat <- coxph(Surv(time = hour, event = reason %in% c(2,3)) ~ backup+ strata(bridgecrane) + servo + trashrack + elevation + slope + age,
                   data = katrina)
ggsurvplot(survfit(fit_strat), data = katrina, fun = "cloglog")

# Servo
fit_strat <- coxph(Surv(time = hour, event = reason %in% c(2,3)) ~ backup+ bridgecrane + strata(servo) + trashrack + elevation + slope + age,
                   data = katrina)
ggsurvplot(survfit(fit_strat), data = katrina, fun = "cloglog")

# Trashrack
fit_strat <- coxph(Surv(time = hour, event = reason %in% c(2,3)) ~ backup+ bridgecrane + servo + strata(trashrack) + elevation + slope + age,
                   data = katrina)
ggsurvplot(survfit(fit_strat), data = katrina, fun = "cloglog")

################### Motor Running 12 consecutive hours ################

# Adding 12-hour motor variable
katrina$a = rep(0,nrow(katrina))
katrina$flag = rep(0,nrow(katrina))
katrina[is.na(katrina)] <- 0

for (j in 1:nrow(katrina)){
  h = katrina[j,"hour"]
  if (h>12){
    for (i in 1:12){
      if (katrina[j,h-i+9]==1){
        katrina$a[j] = katrina$a[j] + 1
      }
    }
  }
}

katrina$flag[(katrina$reason != 0) & (katrina$a == 12)] <- 1


# Fitting the AFT model with new flag
fitAFTnew <- survreg(Surv(time = hour, event = reason %in% c(2,3)) ~ backup+ bridgecrane + servo + trashrack + elevation + slope + age + flag, 
                  data = katrina, dist = "weibull") 
summary(fitAFTnew)

# Fitting the Cox model with new flag
fitCOXnew <- coxph(Surv(time = hour, event = reason %in% c(2,3)) ~ backup+ bridgecrane + servo + trashrack + elevation + slope + age + flag,
                data = katrina)
summary(fitCOXnew)

AIC(fitAFTnew)
AIC(fitAFT)
AIC(fitCOXnew)
AIC(fitCOX)

anova(fitCOXnew,fitCOX,test = "LRT")
